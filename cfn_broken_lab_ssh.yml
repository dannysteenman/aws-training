AWSTemplateFormatVersion: '2010-09-09'
Description: Create 4 broken EC2 instances
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.1.0/24
  AWSRegionToAMI:
    ap-south-1:
      AMI: ami-a2d29fcd
    eu-west-2:
      AMI: ami-6d061a09
    eu-west-1:
      AMI: ami-0a0cac73
    ap-northeast-2:
      AMI: ami-bc8723d2
    ap-northeast-1:
      AMI: ami-9d07a8fb
    sa-east-1:
      AMI: ami-a27902ce
    ca-central-1:
      AMI: ami-3a3f875e
    ap-southeast-1:
      AMI: ami-60783403
    ap-southeast-2:
      AMI: ami-ab6b85c9
    eu-central-1:
      AMI: ami-4d890d22
    us-east-1:
      AMI: ami-c555e0bf
    us-east-2:
      AMI: ami-a91b34cc
    us-west-1:
      AMI: ami-99023df9
    us-west-2:
      AMI: ami-d4d913ac
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: TTT Delivery Workshop
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public
        - CIDR
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet'
      RouteTableId: !Ref 'PublicRouteTable'
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  BrokenInstance01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'True'
          DeleteOnTermination: 'True'
          SubnetId: !Ref 'PublicSubnet'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'SSHSecurityGroup'
      Tags:
        - Key: Name
          Value: 'Broken SSH Instance #01'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -x\n"
            - "exec &> /home/ec2-user/userdata.log\n"
            - "\n"
  BrokenInstance02:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'True'
          DeleteOnTermination: 'True'
          SubnetId: !Ref 'PublicSubnet'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'SSHSecurityGroup'
      Tags:
        - Key: Name
          Value: 'Broken SSH Instance #02'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -x\n"
            - "exec &> /home/ec2-user/userdata.log\n"
            - "\n"
  BrokenInstance03:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'True'
          DeleteOnTermination: 'True'
          SubnetId: !Ref 'PublicSubnet'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'SSHSecurityGroup'
      Tags:
        - Key: Name
          Value: 'Broken SSH Instance #03'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -x\n"
            - "exec &> /home/ec2-user/userdata.log\n"
            - "\n"
  BrokenInstance04:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'True'
          DeleteOnTermination: 'True'
          SubnetId: !Ref 'PublicSubnet'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'WebSecurityGroup'
      Tags:
        - Key: Name
          Value: 'Broken Web Instance #01'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -x\n"
            - "exec &> /home/ec2-user/userdata.log\n"
            - "yum install -y httpd\n"
            - "chkconfig httpd on\n"
            - "\n"
